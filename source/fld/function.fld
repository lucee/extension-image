<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE func-lib PUBLIC "-//Lucee//DTD CFML Function Library 1.0//EN"
	"dtd/web-cfmfunctionlibrary_1_0.dtd">
<func-lib>
	<flib-version>1.00</flib-version>
	<short-name>Image</short-name>
	<uri>http://extension.lucee.org/function/image</uri>
	<display-name>Image</display-name>
	<description>
		Image functions
	</description>

	<!-- GetReadableImageFormats -->
	<function>
		<name>GetReadableImageFormats</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.GetReadableImageFormats</class>
		<keywords>image</keywords>
		<description>Returns a list of image formats that Lucee can read on the operating system where Lucee is deployed.</description>
		<return>
			<type>string</type>
		</return>
	</function>

	<!-- GetWriteableImageFormats -->
	<function>
		<name>GetWriteableImageFormats</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.GetWriteableImageFormats</class>
		<keywords>image</keywords>
		<description>Returns a list of image formats that Lucee can write on the operating system where Lucee is deployed.</description>
		<return>
			<type>string</type>
		</return>
	</function>

	<!-- ImageAddBorder -->
	<function>
		<name>ImageAddBorder</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageAddBorder</class>
		<member-name>addBorder</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<description>Adds a rectangular border around the outside edge of a image.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>thickness</name>
			<type>number</type>
			<required>No</required>
			<default>1</default>
		<description>Thickness of the border in pixels. The default value is 1. The border is added to the outside edge of the image; the image area is increased accordingly.</description>
    </argument>
		<argument>
			<name>color</name>
			<alias>colour</alias>
			<type>string</type>
			<required>No</required>
			<default>black</default>
		<description>Optional. Border color. The default border color is black. See Usage.
Only valid if the borderType is not specified or if borderType = "constant".</description>
    </argument>
		<argument>
			<name>borderType</name>
			<alias>type,border</alias>
			<type>string</type>
			<required>No</required>
			<default>constant</default>
		<description>The type of border:
- zero: Sets the border color to black.
- constant: Sets the border to the specified color (default).
- copy: Sets sample values to copies of the nearest valid pixel. For example, pixels to the left of the valid rectangle assume the value of the valid edge pixel in the same row. Pixels both above and to the left of the valid rectangle assume the value of the upper-left pixel.
- reflect: Mirrors the edges of the source image. For example, if the left edge of the valid rectangle is located at x = 10, pixel (9, y) is a copy of pixel (10, y) and pixel (6, y) is a copy of pixel (13, y).
- wrap: Tiles the source image in the plane.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageBlur -->
	<function>
		<name>ImageBlur</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageBlur</class>
		<member-name>blur</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Smooths image.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
			<description>The image on which this operation is performed.</description>
    	</argument>
		<argument>
			<name>blurRadius</name>
			<type>number</type>
			<required>No</required>
			<default>3</default>
		<description>The size of the blur radius.
Value must be greater than or equal to 3 and less than or equal to 10. The default value is 3.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageClearRect -->
	<function>
		<name>ImageClearRect</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageClearRect</class>
		<member-name>clearRect</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Clears the specified rectangle by filling it with the background color of the current drawing surface.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>object</type>
			<required>Yes</required>
			<description>The image on which this operation is performed.</description>
    	</argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>yes</required>
		<description>The X coordinate of the rectangle to clear.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>yes</required>
		<description>The Y coordinate of the rectangle to clear.</description>
    </argument>
		<argument>
			<name>width</name>
			<type>number</type>
			<required>yes</required>
		<description>The width of the rectangle to clear.</description>
    </argument>
		<argument>
			<name>height</name>
			<type>number</type>
			<required>yes</required>
		<description>The height of the rectangle to clear.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageFilterColorMap -->
	<function>
		<name>ImageFilterColorMap</name>
		<member-name>filterColorMap</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageFilterColorMap</class>
		<keywords>image</keywords>
		<description>These are passed to the function ImageFilters (see ImageFilter documentation) which convert gray values to colors.</description>
		<argument>
			<name>type</name>
			<type>string</type>
			<required>Yes</required>
			<description>type of the color map, possible values are:
			- spectrum: A colormap with the colors of the spectrum
			- linear: A colormap which interpolates linearly between two colors
			- grayscale: A grayscale colormap. Black is 0, white is 1</description>
    	</argument>
		<argument>
			<name>lineColor1</name>
			<alias>lineColour1</alias>
			<type>string</type>
			<required>no</required>
		<description>used only for type "linear", the color corresponding to value 0 in the colormap.</description>
    </argument>
		<argument>
			<name>lineColor2</name>
			<alias>lineColour2</alias>
			<type>string</type>
			<required>no</required>
		<description>used only for type "linear", the color corresponding to value 1 in the colormap.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	
	
	<!-- ImageFilterKernel -->
	<function>
		<name>ImageFilterKernel</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageFilterKernel</class>
		<keywords>image</keywords>
		<description>These are passed to the function ImageFilters (see ImageFilter documentation).
		The ImageFilterKernel function defines a matrix that describes how a specified pixel and its surrounding pixels affect the value computed for the pixel's position in the output image of a filtering operation. 
		The X origin and Y origin indicate the kernel matrix element that corresponds to the pixel position for which an output value is being computed.
		
		</description>
		<argument>
			<name>width</name>
			<type>number</type>
			<required>Yes</required>
			<description>width of the kernel</description>
    	</argument>
		<argument>
			<name>height</name>
			<type>number</type>
			<required>Yes</required>
			<description>height of the kernel</description>
    	</argument>
		<argument>
			<name>data</name>
			<type>any</type>
			<required>Yes</required>
		<description>kernel data in row major order</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	<!-- ImageFilterWarpGrid -->
	<function>
		<name>ImageFilterWarpGrid</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageFilterWarpGrid</class>
		<keywords>image</keywords>
		<description>A warp grid. These are passed to the function ImageFilters (see ImageFilter documentation).</description>
		<argument>
			<name>rows</name>
			<type>number</type>
			<required>Yes</required>
			<description>rows of the warp grid</description>
    	</argument>
		<argument>
			<name>cols</name>
			<type>number</type>
			<required>Yes</required>
			<description>cols of the warp grid</description>
    	</argument>
		<argument>
			<name>width</name>
			<type>number</type>
			<required>Yes</required>
			<description>width of the warp grid</description>
    	</argument>
		<argument>
			<name>height</name>
			<type>number</type>
			<required>Yes</required>
			<description>height of the warp grid</description>
    	</argument>
		<return>
			<type>any</type>
		</return>
	</function>
	<!-- ImageFilterCurves -->
	<function>
		<name>ImageFilterCurves</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageFilterCurves</class>
	<keywords>image</keywords>
		<description>the curves for the wrap grid</description>
		<return>
			<type>any</type>
		</return>
	</function>
	<!-- ImageCopy -->
	<function>
		<name>ImageCopy</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageCopy</class>
		<member-name>copy</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<description>Copies a rectangular area of an image.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the source rectangle.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the source rectangle.</description>
    </argument>
		<argument>
			<name>width</name>
			<type>number</type>
			<required>Yes</required>
		<description>The width of the source rectangle.</description>
    </argument>
		<argument>
			<name>height</name>
			<type>number</type>
			<required>Yes</required>
		<description>The height of the source rectangle.</description>
    </argument>
		<argument>
			<name>dx</name>
			<type>number</type>
			<required>no</required>
			<default>-999</default>
		<description>The x coordinate of the destination rectangle.</description>
    </argument>
		<argument>
			<name>dy</name>
			<type>number</type>
			<required>no</required>
			<default>-999</default>
		<description>The y coordinate of the destination rectangle.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	<!-- ImageCrop -->
	<function>
		<name>ImageCrop</name>
		<member-name>crop</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageCrop</class>
		<description>Crops a image to a specified rectangular area.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>Yes</required>
		<description>The X origin of the crop area.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>Yes</required>
		<description>The Y origin of the crop area.</description>
    </argument>
		<argument>
			<name>width</name>
			<type>number</type>
			<required>Yes</required>
		<description>The width of the crop area.</description>
    </argument>
		<argument>
			<name>height</name>
			<type>number</type>
			<required>Yes</required>
		<description>The height of the crop area.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageDrawArc -->
	<function>
		<name>ImageDrawArc</name>
		<member-name>drawArc</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageDrawArc</class>
		<description>Draws a circular or elliptical arc.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the upper-left corner of the arc.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the upper-left corner of the arc.</description>
    </argument>
		<argument>
			<name>width</name>
			<type>number</type>
			<required>Yes</required>
		<description>The width of the arc.</description>
    </argument>
		<argument>
			<name>height</name>
			<type>number</type>
			<required>Yes</required>
		<description>The height of the arc.</description>
    </argument>
		<argument>
			<name>startAngle</name>
			<type>number</type>
			<required>Yes</required>
		<description>The beginning angle in degrees.</description>
    </argument>
		<argument>
			<name>arcAngle</name>
			<type>number</type>
			<required>Yes</required>
		<description>The angular extent of the arc, relative to the start angle.</description>
    </argument>
		<argument>
			<name>filled</name>
			<type>boolean</type>
			<required>no</required>
		<description>Specify whether the arc is filled:
- true: The arc is filled with the specified drawing color.
- false (default): Only the outline of the arc is drawn.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageDrawBeveledRect -->
	<function>
		<name>ImageDrawBeveledRect</name>
		<member-name>drawBeveledRect</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageDrawBeveledRect</class>
		<description>Draws a rectangle with beveled edges.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the rectangle.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the rectangle.</description>
    </argument>
		<argument>
			<name>width</name>
			<type>number</type>
			<required>Yes</required>
		<description>The width of the rectangle.</description>
    </argument>
		<argument>
			<name>height</name>
			<type>number</type>
			<required>Yes</required>
		<description>The height of the rectangle.</description>
    </argument>
		<argument>
			<name>raised</name>
			<type>boolean</type>
			<required>no</required>
		<description>Specify whether the rectangle appears raised above the surface or sunk into the surface:
- true: The rectangle is raised.
- false (default): The rectangle is sunk.</description>
    </argument>
		<argument>
			<name>filled</name>
			<type>boolean</type>
			<required>no</required>
		<description>Specify whether the rectangle is filled:
- true: The rectangle is filled with the specified drawing color.
- false (default): Only the outline of the rectangle is drawn.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageDrawCubicCurve -->
	<function>
		<name>ImageDrawCubicCurve</name>
		<member-name>drawCubicCurve</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageDrawCubicCurve</class>
		<description>Draws a cubic curve.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x1</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the start point of the cubic curve segment.</description>
    </argument>
		<argument>
			<name>y1</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the start point of the cubic curve segment.</description>
    </argument>
		<argument>
			<name>ctrlx1</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the first control point of the cubic curve segment.</description>
    </argument>
		<argument>
			<name>ctrly1</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the first control point of the cubic curve segment.</description>
    </argument>
		<argument>
			<name>ctrlx2</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the second control point of the cubic curve segment.</description>
    </argument>
		<argument>
			<name>ctrly2</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the second control point of the cubic curve segment.</description>
    </argument>
		<argument>
			<name>x2</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the end point of the cubic curve segment.</description>
    </argument>
		<argument>
			<name>y2</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the end point of the cubic curve segment.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	
	<!-- ImageDrawLine -->
	<function>
		<name>ImageDrawLine</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageDrawLine</class>
		<member-name>drawLine</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Draws a single line defined by two sets of x and y coordinates on a image.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x1</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate for the start point of the line.</description>
    </argument>
		<argument>
			<name>y1</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate for the start point of the line.</description>
    </argument>
		<argument>
			<name>x2</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate for the end point of the line.</description>
    </argument>
		<argument>
			<name>y2</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate for the end point of the line.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageDrawLines -->
	<function>
		<name>ImageDrawLines</name>
		<member-name>drawDrawLines</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageDrawLines</class>
		<keywords>image</keywords>
		<description>Draws a sequence of connected lines defined by arrays of x and y coordinates.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>xcoords</name>
			<type>array</type>
			<required>Yes</required>
		<description>A array of x coordinates.</description>
    </argument>
		<argument>
			<name>ycoords</name>
			<type>array</type>
			<required>Yes</required>
		<description>A array of y coordinates.</description>
    </argument>
		<argument>
			<name>isPolygon</name>
			<type>boolean</type>
			<required>no</required>
		<description>Specify whether the lines form a polygon:
- true: The lines are connected to form a polygon.
- false (default): The lines do not form a polygon.</description>
    </argument>
		<argument>
			<name>filled</name>
			<type>boolean</type>
			<required>no</required>
		<description>Specify whether the polygon is filled:
- true: The polygon is filled with the specified drawing color.
- false (default): Only the outline of the polygon is drawn.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageDrawOval -->
	<function>
		<name>ImageDrawOval</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageDrawOval</class>
		<member-name>drawOval</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Draws an oval.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the upper left corner of the oval to draw.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the upper left corner of the oval to draw.</description>
    </argument>
		<argument>
			<name>width</name>
			<type>number</type>
			<required>Yes</required>
		<description>The width of the oval to draw.</description>
    </argument>
		<argument>
			<name>height</name>
			<type>number</type>
			<required>Yes</required>
		<description>The height of the oval to draw.</description>
    </argument>
		<argument>
			<name>filled</name>
			<type>boolean</type>
			<required>no</required>
		<description>Specify whether the oval is filled:
- true: The oval is filled with the specified drawing color.
- false (default): Only the outline of the oval is drawn.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageDrawPoint -->
	<function>
		<name>ImageDrawPoint</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageDrawPoint</class>
		<member-name>drawPoint</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Draws a point at the specified (x,y) coordinate.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the point.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the point.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageDrawQuadraticCurve -->
	<function>
		<name>ImageDrawQuadraticCurve</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageDrawQuadraticCurve</class>
		<member-name>drawQuadraticCurve</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Draws a curved line. The curve is controlled by a single point.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x1</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the start point of the quadratic curve segment.</description>
    </argument>
		<argument>
			<name>y1</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the start point of the quadratic curve segment.</description>
    </argument>
		<argument>
			<name>ctrlx</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the first control point of the quadratic curve segment.</description>
    </argument>
		<argument>
			<name>ctrly</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the first control point of the quadratic curve segment.</description>
    </argument>
		<argument>
			<name>x2</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the end point of the quadratic curve segment.</description>
    </argument>
		<argument>
			<name>y2</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the end point of the quadratic curve segment.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageDrawRect -->
	<function>
		<name>ImageDrawRect</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageDrawRect</class>
		<member-name>drawRect</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Draws a rectangle.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the rectangle.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the rectangle.</description>
    </argument>
		<argument>
			<name>width</name>
			<type>number</type>
			<required>Yes</required>
		<description>The width of the rectangle.</description>
    </argument>
		<argument>
			<name>height</name>
			<type>number</type>
			<required>Yes</required>
		<description>The height of the rectangle.</description>
    </argument>
		<argument>
			<name>filled</name>
			<type>boolean</type>
			<required>no</required>
		<description>Specify whether the rectangle is filled:
- true: The rectangle is filled with the specified drawing color.
- false (default): Only the outline of the rectangle is drawn.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageDrawRoundRect -->
	<function>
		<name>ImageDrawRoundRect</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageDrawRoundRect</class>
		<member-name>drawRoundRect</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Draws a rectangle with rounded corners.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the rectangle.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the rectangle.</description>
    </argument>
		<argument>
			<name>width</name>
			<type>number</type>
			<required>Yes</required>
		<description>The width of the rectangle.</description>
    </argument>
		<argument>
			<name>height</name>
			<type>number</type>
			<required>Yes</required>
		<description>The height of the rectangle.</description>
    </argument>
		<argument>
			<name>arcWidth</name>
			<type>number</type>
			<required>Yes</required>
		<description>The horizontal diameter of the arc at the four corners.</description>
    </argument>
		<argument>
			<name>arcHeight</name>
			<type>number</type>
			<required>Yes</required>
		<description>The vertical diameter of the arc at the four corners.</description>
    </argument>
		<argument>
			<name>filled</name>
			<type>boolean</type>
			<required>no</required>
		<description>Specify whether the rectangle is filled:
- true: The rectangle is filled with the specified drawing color.
- false (default): Only the outline of the rectangle is drawn.

		</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageDrawText -->
	<function>
		<name>ImageDrawText</name>
		<member-name>drawText</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageDrawText</class>
		<keywords>image</keywords>
		<description>Draws a text string on a image with the baseline of the first character positioned at (x,y) in the image.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>string</name>
			<alias>str</alias>
			<type>string</type>
			<required>Yes</required>
		<description>the text to draw.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate for the start point of the string.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate for the start point of the string.</description>
    </argument>
		<argument>
			<name>attributeCollection</name>
			<type>struct</type>
			<required>no</required>
		<description>a structure used to specify the text characteristics. the following keys are supported:
- font: The name of the font used to draw the text string. If you do not specify the font attribute, the text is drawn in the default system font.
- size: The font size for the text string. The default value is 10 points.
- style: The style to apply to the font ( bold,italic,boldItalic,plain (default) ).
- strikethrough: a boolean that specify whether strikethrough is applied to the text image, default is false.
- underline: a boolean that specify whether underline is applied to the text image, default is false.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	
	
	<!-- ImageFilter -->
	<function>
		<name>ImageFilter</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageFilter</class>
		<member-name>filter</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image,filter</keywords>
		<description>
the function ImageFilter allows to execute a filter against a image. Below you find a list of filter names supported by the function.
every filter need other parameters for the configuration, listed as well below.

average
	A filter which averages the 3x3 neighbourhood of each pixel, providing a simple blur.

	Parameters:
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- useAlpha (boolean)
		Set whether to convolve the alpha channel.
	- premultiplyAlpha (boolean)
		Set whether to premultiply the alpha channel.
block
	A Filter to pixellate images.

	Parameters:
	- blockSize (integer)
		The pixel block size.
		- min-value: 1
		- max-value: 100+
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
blur
	A simple blur filter. You should probably use BoxBlurFilter instead.

	Parameters:
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- useAlpha (boolean)
		Set whether to convolve the alpha channel.
	- premultiplyAlpha (boolean)
		Set whether to premultiply the alpha channel.
border
	A filter to add a border around an image using the supplied Paint, which may be null for no painting.

	Parameters:
	- left (integer)
		The border size on the left edge.
		- min-value: 0
	- right (integer)
		The border size on the right edge.
		- min-value: 0
	- top (integer)
		The border size on the top edge.
		- min-value: 0
	- bottom (integer)
		The border size on the bottom edge.
		- min-value: 0
	- color (String)
		The border color.
bump
	A simple embossing filter.

	Parameters:
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- useAlpha (boolean)
		Set whether to convolve the alpha channel.
	- premultiplyAlpha (boolean)
		Set whether to premultiply the alpha channel.
caustics
	A filter which simulates underwater caustics. This can be animated to get a bottom-of-the-swimming-pool effect.

	Parameters:
	- amount (numeric)
		The amount of effect.
		- min-value: 0
		- max-value: 1
	- brightness (integer)
		The brightness.
		- min-value: 0
		- max-value: 1
	- turbulence (numeric)
		Specifies the turbulence of the texture.
		- min-value: 0
		- max-value: 1
	- dispersion (numeric)
		The dispersion.
		- min-value: 0
		- max-value: 1
	- bgColor (String)
		The background color.
	- time (numeric)
		The time. Use this to animate the effect.
	- scale (numeric)
		Specifies the scale of the texture.
		- min-value: 1
		- max-value: 300+
	- samples (integer)
		The number of samples per pixel. More samples means better quality, but slower rendering.
cellular
	A filter which produces an image with a cellular texture.

	Parameters:
	- amount (numeric)
		The amount of effect.
		- min-value: 0
		- max-value: 1
	- turbulence (numeric)
		Specifies the turbulence of the texture.
		- min-value: 0
		- max-value: 1
	- stretch (numeric)
		Specifies the stretch factor of the texture.
		- min-value: 1
		- max-value: 50+
	- angle (numeric)
		Specifies the angle of the texture.
	- angleCoefficient (numeric)
	- gradientCoefficient (numeric)
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- randomness (numeric)
	- gridType (String)
		the grid type to set, one of the following:
		-  RANDOM
		-  SQUARE
		-  HEXAGONAL
		-  OCTAGONAL
		-  TRIANGULAR
	- distancePower (numeric)
	- scale (numeric)
		Specifies the scale of the texture.
		- min-value: 1
		- max-value: 300+
check
	A Filter to draw grids and check patterns.

	Parameters:
	- angle (numeric)
		The angle of the texture.
	- xScale (integer)
		The X scale of the texture.
	- yScale (integer)
		The Y scale of the texture.
	- fuzziness (integer)
		The fuzziness of the texture.
	- foreground (String)
		The foreground color.
	- background (String)
		The background color.
	- dimensions (Array)
chrome
	A filter which simulates chrome.

	Parameters:
	- amount (numeric)
		The amount of effect.
		- min-value: 0
		- max-value: 1
	- exposure (numeric)
		The exppsure of the effect.
		- min-value: 0
		- max-value: 1
	- colorSource (String)
	- material (String)
		 Use the following format [color,opacity]; Example: "red,0.5"
	- bumpHeight (numeric)
	- bumpSoftness (numeric)
	- bumpShape (integer)
	- viewDistance (numeric)
	- bumpSource (integer)
	- diffuseColor (String)
circle
	A filter which wraps an image around a circular arc.

	Parameters:
	- radius (numeric)
		The radius of the effect.
		- min-value: 0
	- angle (numeric)
		The angle of the arc.
	- spreadAngle (numeric)
		The spread angle of the arc.
	- centreX (numeric)
		The centre of the effect in the Y direction as a proportion of the image size.
	- centreY (numeric)
		The centre of the effect in the Y direction as a proportion of the image size.
	- height (numeric)
		The height of the arc.
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
contour
	A filter which draws contours on an image at given brightness levels.

	Parameters:
	- levels (numeric)
	- contourColor (String)
	- offset (numeric)
	- scale (numeric)
		Specifies the scale of the contours.
		- min-value: 0
		- max-value: 1
contrast
	A filter to change the brightness and contrast of an image.

	Parameters:
	- brightness (numeric)
		The filter brightness.
		- min-value: 0
		- max-value: 0
	- contrast (numeric)
		The filter contrast.
		- min-value: 0
		- max-value: 0
	- dimensions (Array)
crop
	A filter which crops an image to a given rectangle.

	Parameters:
	- x (integer)
		The left edge of the crop rectangle.
	- y (integer)
		The top edge of the crop rectangle.
	- width (integer)
		The width of the crop rectangle.
	- height (integer)
		The height of the crop rectangle.
crystallize
	A filter which applies a crystallizing effect to an image, by producing Voronoi cells filled with colours from the image.

	Parameters:
	- edgeThickness (numeric)
	- fadeEdges (boolean)
	- edgeColor (String)
	- amount (numeric)
		The amount of effect.
		- min-value: 0
		- max-value: 1
	- turbulence (numeric)
		Specifies the turbulence of the texture.
		- min-value: 0
		- max-value: 1
	- stretch (numeric)
		Specifies the stretch factor of the texture.
		- min-value: 1
		- max-value: 50+
	- angle (numeric)
		Specifies the angle of the texture.
	- angleCoefficient (numeric)
	- gradientCoefficient (numeric)
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- randomness (numeric)
	- gridType (String)
		the grid type to set, one of the following:
		-  RANDOM
		-  SQUARE
		-  HEXAGONAL
		-  OCTAGONAL
		-  TRIANGULAR
	- distancePower (numeric)
	- scale (numeric)
		Specifies the scale of the texture.
		- min-value: 1
		- max-value: 300+
curl
	A page curl effect.

	Parameters:
	- radius (numeric)
	- angle (numeric)
	- transition (numeric)
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
despeckle
	A filter which removes noise from an image using a "pepper and salt" algorithm.

	Parameters:
diffuse
	This filter diffuses an image by moving its pixels in random directions.

	Parameters:
	- scale (numeric)
		Specifies the scale of the texture.
		- min-value: 1
		- max-value: 100+
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
diffusion
	A filter which uses Floyd-Steinberg error diffusion dithering to halftone an image.

	Parameters:
	- levels (integer)
		The number of dither levels.
	- serpentine (boolean)
		Set whether to use a serpentine pattern for return or not. This can reduce 'avalanche' artifacts in the output.
	- colorDither (boolean)
		Set whether to use a color dither.
dilate
	Given a binary image, this filter performs binary dilation, setting all added pixels to the given 'new' color.

	Parameters:
	- threshold (integer)
		The threshold - the number of neighbouring pixels for dilation to occur.
	- iterations (integer)
		The number of iterations the effect is performed.
		- min-value: 0
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- newColor (String)
displace
	A filter which simulates the appearance of looking through glass. A separate grayscale displacement image is provided and
	pixels in the source image are displaced according to the gradient of the displacement map.

	Parameters:
	- amount (numeric)
		The amount of distortion.
		- min-value: 0
		- max-value: 1
	- displacementMap (Image)
		The displacement map.
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
dissolve
	A filter which "dissolves" an image by thresholding the alpha channel with random numbers.

	Parameters:
	- density (numeric)
		The density of the image in the range 0..1.
		- min-value: 0
		- max-value: 1
	- softness (numeric)
		The softness of the dissolve in the range 0..1.
		- min-value: 0
		- max-value: 1
	- dimensions (Array)
dither
	A filter which performs ordered dithering on an image.

	Parameters:
	- levels (integer)
		The number of dither levels.
	- colorDither (boolean)
		Set whether to use a color dither.
	- dimensions (Array)
edge
	An edge-detection filter.

	Parameters:
emboss
	A class to emboss an image.

	Parameters:
	- bumpHeight (numeric)
	- azimuth (numeric)
	- elevation (numeric)
	- emboss (boolean)
equalize
	A filter to perform auto-equalization on an image.

	Parameters:
erode
	Given a binary image, this filter performs binary erosion, setting all removed pixels to the given 'new' color.

	Parameters:
	- threshold (integer)
		The threshold - the number of neighbouring pixels for dilation to occur.
	- iterations (integer)
		The number of iterations the effect is performed.
		- min-value: 0
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- newColor (String)
exposure
	A filter which changes the exposure of an image.

	Parameters:
	- exposure (numeric)
		The exposure level.
		- min-value: 0
		- max-value: 5+
	- dimensions (Array)
fade
	An abstract superclass for point filters. The interface is the same as the old RGBImageFilter.

	Parameters:
	- angle (numeric)
		Specifies the angle of the texture.
	- sides (integer)
	- fadeStart (numeric)
	- fadeWidth (numeric)
	- invert (boolean)
	- dimensions (Array)
feedback
	A filter which priduces a video feedback effect by repeated transformations.

	Parameters:
	- iterations (integer)
		The number of iterations.
		- min-value: 0
	- angle (numeric)
		Specifies the angle of each iteration.
	- centreX (numeric)
		The centre of the effect in the X direction as a proportion of the image size.
	- centreY (numeric)
		The centre of the effect in the Y direction as a proportion of the image size.
	- distance (numeric)
		Specifies the distance to move on each iteration.
	- rotation (numeric)
		Specifies the amount of rotation on each iteration.
	- zoom (numeric)
		Specifies the amount to scale on each iteration.
	- startAlpha (numeric)
		The alpha value at the first iteration.
		- min-value: 0
		- max-value: 1
	- endAlpha (numeric)
		The alpha value at the last iteration.
		- min-value: 0
		- max-value: 1
fill
	A filter which fills an image with a given color. Normally you would just call Graphics.fillRect but it can sometimes be useful
	to go via a filter to fit in with an existing API.

	Parameters:
	- fillColor (String)
		The fill color.
	- dimensions (Array)
flare
	An experimental filter for rendering lens flares.

	Parameters:
	- radius (numeric)
		The radius of the effect.
		- min-value: 0
	- centreX (numeric)
	- centreY (numeric)
	- ringWidth (numeric)
	- baseAmount (numeric)
	- ringAmount (numeric)
	- rayAmount (numeric)
	- color (String)
	- dimensions (Array)
flip
	A filter which flips images or rotates by multiples of 90 degrees.

	Parameters:
	- operation (integer)
		The filter operation.
gain
	A filter which changes the gain and bias of an image - similar to ContrastFilter.

	Parameters:
	- gain (numeric)
		The gain.
		- min-value:: 0
		- max-value:: 1
	- bias (numeric)
		The bias.
		- min-value:: 0
		- max-value:: 1
	- dimensions (Array)
gamma
	A filter for changing the gamma of an image.

	Parameters:
	- gamma (numeric)
		The gamma levels.
	- dimensions (Array)
gaussian
	A filter which applies Gaussian blur to an image. This is a subclass of ConvolveFilter
	which simply creates a kernel with a Gaussian distribution for blurring.

	Parameters:
	- radius (numeric)
		The radius of the kernel, and hence the amount of blur. The bigger the radius, the longer this filter will take.
		- min-value: 0
		- max-value: 100+
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- useAlpha (boolean)
		Set whether to convolve the alpha channel.
	- premultiplyAlpha (boolean)
		Set whether to premultiply the alpha channel.
glint
	A filter which renders "glints" on bright parts of the image.

	Parameters:
	- amount (numeric)
		The amount of glint.
		- min-value: 0
		- max-value: 1
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- blur (numeric)
		The blur that is applied before thresholding.
	- glintOnly (boolean)
		Set whether to render the stars and the image or only the stars.
	- length (integer)
		The length of the stars.
	- threshold (numeric)
		The threshold value.
glow
	A filter which adds Gaussian blur to an image, producing a glowing effect.

	Parameters:
	- amount (numeric)
		The amount of glow.
		- min-value: 0
		- max-value: 1
	- radius (numeric)
		The radius of the kernel, and hence the amount of blur. The bigger the radius, the longer this filter will take.
		- min-value: 0
		- max-value: 100+
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- useAlpha (boolean)
		Set whether to convolve the alpha channel.
	- premultiplyAlpha (boolean)
		Set whether to premultiply the alpha channel.
gradient
	A filter which draws a coloured gradient. This is largely superceded by GradientPaint in Java1.2, but does provide a few
	more gradient options.

	Parameters:
	- interpolation (integer)
	- angle (numeric)
		Specifies the angle of the texture.
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- point1 (String)
		 Use the following format [X-coordinate,Y-coordinate]; Example: "13,20"
	- point2 (String)
		 Use the following format [X-coordinate,Y-coordinate]; Example: "13,20"
	- paintMode (integer)
	- type (integer)
gray
	A filter which 'grays out' an image by averaging each pixel with white.

	Parameters:
	- dimensions (Array)
grayscale
	A filter which converts an image to grayscale using the NTSC brightness calculation.

	Parameters:
	- dimensions (Array)
halftone
	A filter which can be used to produce wipes by transferring the luma of a mask image into the alpha channel of the source.

	Parameters:
	- density (numeric)
		The density of the image in the range 0..1.
		*arg density The density
	- softness (numeric)
		The softness of the effect in the range 0..1.
		- min-value: 0
		- max-value: 1
	- invert (boolean)
	- mask (Image)
interpolate
	A filter which interpolates between two images. You can set the interpolation factor outside the range 0 to 1
	to extrapolate images.

	Parameters:
	- destination (Image)
		The destination image.
	- interpolation (numeric)
		The interpolation factor.
invert
	A filter which inverts the RGB channels of an image.

	Parameters:
	- dimensions (Array)
kaleidoscope
	A Filter which produces the effect of looking into a kaleidoscope.

	Parameters:
	- radius (numeric)
		The radius of the effect.
		- min-value: 0
	- angle (numeric)
		The angle of the kaleidoscope.
	- centreX (numeric)
		The centre of the effect in the X direction as a proportion of the image size.
	- centreY (numeric)
		The centre of the effect in the Y direction as a proportion of the image size.
	- sides (integer)
		The number of sides of the kaleidoscope.
		- min-value: 2
	- angle2 (numeric)
		The secondary angle of the kaleidoscope.
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
levels
	A filter which allows levels adjustment on an image.

	Parameters:
	- lowLevel (numeric)
	- highLevel (numeric)
	- lowOutputLevel (numeric)
	- highOutputLevel (numeric)
life
	A filter which performs one round of the game of Life on an image.

	Parameters:
	- iterations (integer)
		The number of iterations the effect is performed.
		- min-value: 0
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- newColor (String)
light
	A filter which produces lighting and embossing effects.

	Parameters:
	- colorSource (String)
	- material (String)
		 Use the following format [color,opacity]; Example: "red,0.5"
	- bumpHeight (numeric)
	- bumpSoftness (numeric)
	- bumpShape (integer)
	- viewDistance (numeric)
	- bumpSource (integer)
	- diffuseColor (String)
lookup
	A filter which uses the brightness of each pixel to lookup a color from a colormap.

	Parameters:
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- dimensions (Array)
map
	An abstract superclass for filters which distort images in some way. The subclass only needs to override
	two methods to provide the mapping between source and destination pixels.

	Parameters:
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
marble
	This filter applies a marbling effect to an image, displacing pixels by random amounts.

	Parameters:
	- amount (numeric)
		The amount of effect.
		- min-value: 0
		- max-value: 1
	- turbulence (numeric)
		Specifies the turbulence of the effect.
		- min-value: 0
		- max-value: 1
	- xScale (numeric)
		The X scale of the effect.
	- yScale (numeric)
		The Y scale of the effect.
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
mask
	Applies a bit mask to each ARGB pixel of an image. You can use this for, say, masking out the red channel.

	Parameters:
	- mask (integer)
	- dimensions (Array)
maximum
	A filter which replcaes each pixel by the maximum of itself and its eight neightbours.

	Parameters:
median
	A filter which performs a 3x3 median operation. Useful for removing dust and noise.

	Parameters:
minimum
	A filter which replcaes each pixel by the mimimum of itself and its eight neightbours.

	Parameters:
mirror


	Parameters:
	- angle (numeric)
		Specifies the angle of the mirror.
	- centreY (numeric)
	- distance (numeric)
	- rotation (numeric)
	- gap (numeric)
	- opacity (numeric)
		The opacity of the reflection.
noise
	A filter which adds random noise into an image.

	Parameters:
	- amount (integer)
		The amount of effect.
		- min-value: 0
		- max-value: 1
	- monochrome (boolean)
		Set whether to use monochrome noise.
	- density (numeric)
		The density of the noise.
	- distribution (integer)
		The distribution of the noise.
	- dimensions (Array)
offset
	An abstract superclass for filters which distort images in some way. The subclass only needs to override
	two methods to provide the mapping between source and destination pixels.

	Parameters:
	- xOffset (integer)
	- yOffset (integer)
	- wrap (boolean)
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
oil
	A filter which produces a "oil-painting" effect.

	Parameters:
	- levels (integer)
		The number of levels for the effect.
	- range (integer)
		The range of the effect in pixels.
opacity
	Sets the opacity (alpha) of every pixel in an image to a constant value.

	Parameters:
	- opacity (integer)
		The opacity.
	- dimensions (Array)
outline
	Given a binary image, this filter converts it to its outline, replacing all interior pixels with the 'new' color.

	Parameters:
	- iterations (integer)
		The number of iterations the effect is performed.
		- min-value: 0
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- newColor (String)
perspective
	A filter which performs a perspective distortion on an image.

	Parameters:
	- xLT (numeric)
		the new horizontal position of the top left corner, negative values are translated to image-width - x.
	- yLT (numeric)
		the new vertical position of the top left corner, negative values are translated to image-height - y.
	- xRT (numeric)
		the new horizontal position of the top right corner, negative values are translated to image-width - x.
	- yRT (numeric)
		the new vertical position of the top right corner, negative values are translated to image-height - y.
	- xRB (numeric)
		the new horizontal position of the bottom right corner, negative values are translated to image-width - x.
	- yRB (numeric)
		the new vertical position of the bottom right corner, negative values are translated to image-height - y.
	- xLB (numeric)
		the new horizontal position of the bottom left corner, negative values are translated to image-width - x.
	- yLB (numeric)
		the new vertical position of the bottom left corner, negative values are translated to image-height - y.
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
pinch
	A filter which performs the popular whirl-and-pinch distortion effect.

	Parameters:
	- radius (numeric)
		The radius of the effect.
		- min-value: 0
	- amount (numeric)
		The amount of pinch.
		- min-value: -1
		- max-value: 1
	- angle (numeric)
		The angle of twirl in radians. 0 means no distortion.
	- centreX (numeric)
		The centre of the effect in the X direction as a proportion of the image size.
	- centreY (numeric)
		The centre of the effect in the Y direction as a proportion of the image size.
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
plasma
	A filter which acts as a superclass for filters which need to have the whole image in memory
	to do their stuff.

	Parameters:
	- turbulence (numeric)
		Specifies the turbulence of the texture.
		- min-value: 0
		- max-value: 10
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- scaling (numeric)
	- useColormap (boolean)
	- useImageColors (boolean)
	- seed (integer)
pointillize
	A filter which produces an image with a cellular texture.

	Parameters:
	- fuzziness (numeric)
	- edgeThickness (numeric)
	- fadeEdges (boolean)
	- edgeColor (String)
	- amount (numeric)
		The amount of effect.
		- min-value: 0
		- max-value: 1
	- turbulence (numeric)
		Specifies the turbulence of the texture.
		- min-value: 0
		- max-value: 1
	- stretch (numeric)
		Specifies the stretch factor of the texture.
		- min-value: 1
		- max-value: 50+
	- angle (numeric)
		Specifies the angle of the texture.
	- angleCoefficient (numeric)
	- gradientCoefficient (numeric)
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- randomness (numeric)
	- gridType (String)
		the grid type to set, one of the following:
		-  RANDOM
		-  SQUARE
		-  HEXAGONAL
		-  OCTAGONAL
		-  TRIANGULAR
	- distancePower (numeric)
	- scale (numeric)
		Specifies the scale of the texture.
		- min-value: 1
		- max-value: 300+
polar
	A filter which distorts and image by performing coordinate conversions between rectangular and polar coordinates.

	Parameters:
	- type (String)
		The distortion type, valid values are
		- RECT_TO_POLAR = Convert from rectangular to polar coordinates
		- POLAR_TO_RECT = Convert from polar to rectangular coordinates
		- INVERT_IN_CIRCLE = Invert the image in a circle
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
posterize
	A filter to posterize an image.

	Parameters:
	- numLevels (integer)
		The number of levels in the output image.
	- dimensions (Array)
quantize
	A filter which quantizes an image to a set number of colors - useful for producing
	images which are to be encoded using an index color model. The filter can perform
	Floyd-Steinberg error-diffusion dithering if required. At present, the quantization
	is done using an octtree algorithm but I eventually hope to add more quantization
	methods such as median cut. Note: at present, the filter produces an image which
	uses the RGB color model (because the application it was written for required it).
	I hope to extend it to produce an IndexColorModel by request.

	Parameters:
	- serpentine (boolean)
		Set whether to use a serpentine pattern for return or not. This can reduce 'avalanche' artifacts in the output.
	- numColors (String)
		The number of colors to quantize to.
	- dither (boolean)
		Set whether to use dithering or not. If not, the image is posterized.
quilt
	A filter which acts as a superclass for filters which need to have the whole image in memory
	to do their stuff.

	Parameters:
	- iterations (integer)
		The number of iterations the effect is performed.
		- min-value: 0
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- a (numeric)
	- b (numeric)
	- c (numeric)
	- d (numeric)
	- k (integer)
rays
	A filter which produces the effect of light rays shining out of an image.

	Parameters:
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- strength (numeric)
		The strength of the rays.
	- opacity (numeric)
		The opacity of the rays.
	- raysOnly (boolean)
		Set whether to render only the rays.
	- threshold (numeric)
		The threshold value.
	- angle (numeric)
	- centreX (numeric)
	- centreY (numeric)
	- distance (numeric)
	- rotation (numeric)
	- zoom (numeric)
rescale
	A filter which simply multiplies pixel values by a given scale factor.

	Parameters:
	- scale (numeric)
		Specifies the scale factor.
		- min-value: 1
		- max-value: 5+
	- dimensions (Array)
ripple
	A filter which distorts an image by rippling it in the X or Y directions.
	The amplitude and wavelength of rippling can be specified as well as whether
	pixels going off the edges are wrapped or not.

	Parameters:
	- xAmplitude (numeric)
		The amplitude of ripple in the X direction.
	- xWavelength (numeric)
		The wavelength of ripple in the X direction.
	- yAmplitude (numeric)
		The amplitude of ripple in the Y direction.
	- yWavelength (numeric)
		The wavelength of ripple in the Y direction.
	- waveType (String)
		The wave type.
		valid values are:
		- sine (default):  Sine wave ripples.
		- sawtooth: Sawtooth wave ripples.
		- triangle: Triangle wave ripples.
		- noise: Noise ripples.
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
rotate
	A filter which rotates an image. These days this is easier done with Java2D, but this filter remains.

	Parameters:
	- angle (numeric)
		Specifies the angle of rotation.
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
saturation
	A filter to change the saturation of an image. This works by calculating a grayscale version of the image
	and then extrapolating away from it.

	Parameters:
	- amount (numeric)
		The amount of saturation change. 1 leaves the image unchanged, values between 0 and 1 desaturate, 0 completely
		desaturates it and values above 1 increase the saturation.
	- dimensions (Array)
scale
	Scales an image using the area-averaging algorithm, which can't be done with AffineTransformOp.

	Parameters:
	- width (integer)
	- height (integer)
scratch


	Parameters:
	- angle (numeric)
	- density (numeric)
	- angleVariation (numeric)
	- length (numeric)
	- seed (integer)
	- color (String)
	- width (numeric)
shade
	A filter which acts as a superclass for filters which need to have the whole image in memory
	to do their stuff.

	Parameters:
	- bumpHeight (numeric)
	- bumpSoftness (numeric)
	- bumpSource (integer)
shadow
	A filter which draws a drop shadow based on the alpha channel of the image.

	Parameters:
	- radius (numeric)
		The radius of the kernel, and hence the amount of blur. The bigger the radius, the longer this filter will take.
	- angle (numeric)
		Specifies the angle of the shadow.
	- distance (numeric)
		The distance of the shadow.
	- opacity (numeric)
		The opacity of the shadow.
	- shadowColor (String)
		The color of the shadow.
	- addMargins (boolean)
		Set whether to increase the size of the output image to accomodate the shadow.
	- shadowOnly (boolean)
		Set whether to only draw the shadow without the original image.
shape
	A filter which acts as a superclass for filters which need to have the whole image in memory
	to do their stuff.

	Parameters:
	- useAlpha (boolean)
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- invert (boolean)
	- factor (numeric)
	- merge (boolean)
	- type (integer)
sharpen
	A filter which performs a simple 3x3 sharpening operation.

	Parameters:
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- useAlpha (boolean)
		Set whether to convolve the alpha channel.
	- premultiplyAlpha (boolean)
		Set whether to premultiply the alpha channel.
shatter


	Parameters:
	- iterations (integer)
	- centreX (numeric)
	- centreY (numeric)
	- transition (numeric)
	- distance (numeric)
	- rotation (numeric)
	- zoom (numeric)
	- startAlpha (numeric)
	- endAlpha (numeric)
	- tile (integer)
shear
	An abstract superclass for filters which distort images in some way. The subclass only needs to override
	two methods to provide the mapping between source and destination pixels.

	Parameters:
	- resize (boolean)
	- xAngle (numeric)
	- yAngle (numeric)
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
shine
	A filter which simply multiplies pixel values by a given scale factor.

	Parameters:
	- radius (numeric)
		The radius of the kernel, and hence the amount of blur. The bigger the radius, the longer this filter will take.
	- brightness (numeric)
	- angle (numeric)
	- softness (numeric)
	- distance (numeric)
	- shadowOnly (boolean)
	- bevel (numeric)
	- shineColor (String)
skeleton
	A filter which reduces a binary image to a skeleton.
	Based on an algorithm by Zhang and Suen (CACM, March 1984, 236-239).

	Parameters:
	- iterations (integer)
		The number of iterations the effect is performed.
		- min-value: 0
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- newColor (String)
smear
	A filter which acts as a superclass for filters which need to have the whole image in memory
	to do their stuff.

	Parameters:
	- angle (numeric)
		Specifies the angle of the texture.
	- density (numeric)
	- distance (integer)
	- shape (integer)
	- scatter (numeric)
	- mix (numeric)
	- fadeout (integer)
	- background (boolean)
solarize
	A filter which solarizes an image.

	Parameters:
	- dimensions (Array)
sparkle
	An abstract superclass for point filters. The interface is the same as the old RGBImageFilter.

	Parameters:
	- radius (integer)
		The radius of the effect.
		- min-value: 0
	- amount (integer)
		The amount of sparkle.
		- min-value: 0
		- max-value: 1
	- randomness (integer)
	- rays (integer)
	- color (String)
	- dimensions (Array)
sphere
	A filter which simulates a lens placed over an image.

	Parameters:
	- radius (numeric)
		The radius of the effect.
		- min-value: 0
	- centreX (numeric)
		The centre of the effect in the X direction as a proportion of the image size.
	- centreY (numeric)
		The centre of the effect in the Y direction as a proportion of the image size.
	- refractionIndex (numeric)
		The index of refaction.
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
stamp
	A filter which produces a rubber-stamp type of effect by performing a thresholded blur.

	Parameters:
	- radius (numeric)
		The radius of the effect.
		- min-value: 0
	- softness (numeric)
		The softness of the effect in the range 0..1.
		- min-value: 0
		- max-value: 1
	- white (String)
		The color to be used for pixels above the upper threshold.
	- black (String)
		The color to be used for pixels below the lower threshold.
	- threshold (numeric)
		The threshold value.
	- dimensions (Array)
swim
	A filter which distorts an image as if it were underwater.

	Parameters:
	- amount (numeric)
		The amount of swim.
		- min-value: 0
		- max-value: 100+
	- turbulence (numeric)
		Specifies the turbulence of the texture.
		- min-value: 0
		- max-value: 1
	- stretch (numeric)
		Specifies the stretch factor of the distortion.
		- min-value: 1
		- max-value: 50+
	- angle (numeric)
		Specifies the angle of the effect.
	- time (numeric)
		Specifies the time. Use this to animate the effect.
	- scale (numeric)
		Specifies the scale of the distortion.
		- min-value: 1
		- max-value: 300+
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
texture
	An abstract superclass for point filters. The interface is the same as the old RGBImageFilter.

	Parameters:
	- amount (numeric)
		The amount of texture.
		- min-value: 0
		- max-value: 1
	- turbulence (numeric)
		Specifies the turbulence of the texture.
		- min-value: 0
		- max-value: 1
	- stretch (numeric)
		Specifies the stretch factor of the texture.
		- min-value: 1
		- max-value: 50+
	- angle (numeric)
		Specifies the angle of the texture.
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- operation (integer)
	- scale (numeric)
		Specifies the scale of the texture.
		- min-value: 1
		- max-value: 300+
	- dimensions (Array)
threshold
	A filter which performs a threshold operation on an image.

	Parameters:
	- white (integer)
		The color to be used for pixels above the upper threshold.
	- black (integer)
		The color to be used for pixels below the lower threshold.
	- lowerThreshold (integer)
		The lower threshold value.
	- upperThreshold (integer)
		The upper threshold value.
	- dimensions (Array)
twirl
	A Filter which distorts an image by twisting it from the centre out.
	The twisting is centred at the centre of the image and extends out to the smallest of
	the width and height. Pixels outside this radius are unaffected.

	Parameters:
	- radius (numeric)
		The radius of the effect.
		- min-value: 0
	- angle (numeric)
		The angle of twirl in radians. 0 means no distortion.
	- centreX (numeric)
		The centre of the effect in the X direction as a proportion of the image size.
	- centreY (numeric)
		The centre of the effect in the Y direction as a proportion of the image size.
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
unsharp
	A filter which subtracts Gaussian blur from an image, sharpening it.

	Parameters:
	- amount (numeric)
		The amount of sharpening.
		- min-value: 0
		- max-value: 1
	- threshold (integer)
		The threshold value.
	- radius (numeric)
		The radius of the kernel, and hence the amount of blur. The bigger the radius, the longer this filter will take.
		- min-value: 0
		- max-value: 100+
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- useAlpha (boolean)
		Set whether to convolve the alpha channel.
	- premultiplyAlpha (boolean)
		Set whether to premultiply the alpha channel.
water
	A filter which produces a water ripple distortion.

	Parameters:
	- radius (numeric)
		The radius of the effect.
		- min-value: 0
	- centreX (numeric)
		The centre of the effect in the X direction as a proportion of the image size.
	- centreY (numeric)
		The centre of the effect in the Y direction as a proportion of the image size.
	- wavelength (numeric)
		The wavelength of the ripples.
	- amplitude (numeric)
		The amplitude of the ripples.
	- phase (numeric)
		The phase of the ripples.
	- edgeAction (String)
		The action to perfomr for pixels off the image edges.
		valid values are:
		- clamp (default): Clamp pixels off the edge to the nearest edge.
		- wrap: Wrap pixels off the edge to the opposite edge.
		- zero: Treat pixels off the edge as zero
	- interpolation (String)
		The type of interpolation to perform.
		valid values are:
		- bilinear (default): Use bilinear interpolation.
		- nearest_neighbour: Use nearest-neighbour interpolation.
weave
	An abstract superclass for point filters. The interface is the same as the old RGBImageFilter.

	Parameters:
	- useImageColors (boolean)
	- xGap (numeric)
	- xWidth (numeric)
	- yWidth (numeric)
	- yGap (numeric)
	- crossings ([[I)
	- roundThreads (boolean)
	- shadeCrossings (boolean)
	- dimensions (Array)
wood
	A filter which produces a simulated wood texture. This is a bit of a hack, but might be usefult to some people.

	Parameters:
	- turbulence (numeric)
		Specifies the turbulence of the texture.
		- min-value: 0
		- max-value: 1
	- stretch (numeric)
		Specifies the stretch factor of the texture.
		- min-value: 1
		- max-value: 50+
	- angle (numeric)
		Specifies the angle of the texture.
	- colormap (Colormap)
		The colormap to be used for the filter. Use function ImageFilterColorMap to create.
	- gain (numeric)
		Specifies the gain of the texture.
		- min-value: 0
		- max-value: 1
	- rings (numeric)
		Specifies the rings value.
		- min-value: 0
		- max-value: 1
	- fibres (numeric)
		Specifies the amount of fibres in the texture.
		- min-value: 0
		- max-value: 1
	- scale (numeric)
		Specifies the scale of the texture.
		- min-value: 1
		- max-value: 300+
	- dimensions (Array)
</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
			<description>The image on which this operation is performed.</description>
    	</argument>
		<argument>
			<name>filtername</name>
			<type>string</type>
			<required>yes</required>
			<description>the name of the filter executed (average,block,blur ...)</description>
    	</argument>
		<argument>
			<name>parameters</name>
			<type>struct</type>
			<required>no</required>
			<description>parameters for the filter defined with argument filtername</description>
    	</argument>
		<return>
			<type>void</type>
		</return>
	</function>
	
	
	<!-- ImageFlip -->
	<function>
		<name>ImageFlip</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageFlip</class>
		<member-name>flip</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Flips an image across an axis.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>transpose</name>
			<type>string</type>
			<required>no</required>
			<default>vertical</default>
		<description>Transpose the image:
- vertical (default): Flip an image across an imaginary horizontal line that runs through the center of the image.
- horizontal: Flip an image across an imaginary vertical line that runs through the center of the image.
- diagonal: Flip an image across its main diagonal that runs from the upper-left to the lower-right corner.
- antidiagonal: Flip an image across its main diagonal that runs from the upper-right to the lower-left corner.
- ("90|180|270"): Rotate an image clockwise by 90, 180, or 270 degrees.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>

	<!-- ImageCaptcha -->
	<function>
		<name>ImageCaptcha</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageCaptcha</class>
		<keywords>image</keywords>
		<description>Creates a captcha image</description>
		<argument>
			<name>text</name>
			<type>string</type>
			<required>Yes</required>
			<description>Text in the captcha.</description>
		</argument>
		<argument>
			<name>height</name>
			<type>numeric</type>
			<required>yes</required>
			<description>Height of the captcha.</description>
		</argument>
		<argument>
			<name>width</name>
			<type>numeric</type>
			<required>yes</required>
			<description>Width of the captcha.</description>
		</argument>
		<argument>
			<name>difficulty</name>
			<type>string</type>
			<required>No</required>
			<default>low</default>
			<values>low,medium,high</values>
			<description>Level of complexity of the CAPTCHA text. Specify one of the following levels of text distortion: low, medium, high</description>
		</argument>
		<argument>
			<name>fonts</name>
			<alias>font</alias>
			<type>any</type>
			<required>No</required>
			<default>arial</default>
			<description>One or more valid fonts to use for the CAPTCHA text, as an array or as string list (separate multiple fonts with commas).
			Lucee supports only the system fonts that the JDK can recognize. For example, TTF fonts in the Windows directory are supported on Windows.</description>
		</argument>
		<argument>
			<name>fontsize</name>
			<alias>size</alias>
			<type>numeric</type>
			<required>No</required>
			<default>24</default>
			<description>font size of the text in the CAPTCHA image.</description>
		</argument>
		<argument>
			<name>fontcolor</name>
			<alias>color</alias>
			<type>string</type>
			<required>No</required>
			<default>black</default>
			<description>font color of the text in the CAPTCHA image.</description>
		</argument>
		<return>
			<type>any</type>
		</return>
	</function>
 

	<!-- ImageGetBlob -->
	<function>
		<name>ImageGetBlob</name>
		<member-name>getBlob</member-name>
		<member-type>image</member-type>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageGetBlob</class>
		<keywords>image</keywords>
		<description>Retrieves the bytes of the underlying image. The bytes are in the same image format as the source image.</description>
		<argument>
			<name>image</name>
			<alias>source,name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	<!-- ImageGetBufferedImage -->
	<function>
		<name>ImageGetBufferedImage</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageGetBufferedImage</class>
		<member-name>getBufferedImage</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<description>Returns the java.awt.BufferedImage object underlying the current image.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	<!-- ImageGetIptcMetadata -->
	<function>
		<name>ImageGetIptcMetadata</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageGetIptcMetadata</class>
		<member-name>getIptcMetadata</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<description>Retrieves the International Press Telecommunications Council (IPTC )headers in a image as a struct. The IPTC metadata contains text that describes the image that is stored with it. IPTC metadata includes, but is not limited to, caption, keywords, credit, copyright, object name, created date, byline, headline, and source.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
			<description>The image on which this operation is performed.</description>
    	</argument>
		<return>
			<type>struct</type>
		</return>
	</function>
	<!-- ImageGetEXIFMetadata -->
	<function>
		<name>ImageGetEXIFMetadata</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageGetEXIFMetadata</class>
		<member-name>getEXIFMetadata</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<description>Retrieves the Exchangeable Image File Format (EXIF) headers in an image as a CFML structure.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
			<description>The image on which this operation is performed.</description>
    	</argument>
		<return>
			<type>struct</type>
		</return>
	</function>
	<!-- ImageGetEXIFTag -->
	<function>
		<name>ImageGetEXIFTag</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageGetEXIFTag</class>
		<member-name>getEXIFTag</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<description>Retrieves the specified EXIF tag in an image.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>tagName</name>
			<type>string</type>
			<required>Yes</required>
		<description>The EXIF tag name to be returned.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	<!-- ImageGetHeight -->
	<function>
		<name>ImageGetHeight</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageGetHeight</class>
		<member-name>getHeight</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<description>Retrieves the height of the image in pixels.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<return>
			<type>number</type>
		</return>
	</function>
	<!-- ImageGetWidth -->
	<function>
		<name>ImageGetWidth</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageGetWidth</class>
		<member-name>getWidth</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<description>Retrieves the width of the specified image.</description>
		<argument>
			
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<return>
			<type>number</type>
		</return>
	</function>
	<!-- ImageGetIPTCTag -->
	<function>
		<name>ImageGetIPTCTag</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageGetIPTCTag</class>
		<status>unimplemented</status>
		<member-name>getIPTCTag</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<description>Retrieves the value of the IPTC tag for a image.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>tagName</name>
			<type>string</type>
			<required>Yes</required>
		<description>The IPTC tag name whose value is returned.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	<!-- ImageGrayscale -->
	<function>
		<name>ImageGrayscale</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageGrayscale</class>
		<member-name>grayscale</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Converts a image to grayscale.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageFormats -->
	<function>
		<name>ImageFormats</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageFormats</class>
		<keywords>image</keywords>
		<description>return all available readers and writers</description>
		<return>
			<type>struct</type>
		</return>
	</function>
	<!-- ImageFonts -->
	<function>
		<name>ImageFonts</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageFonts</class>
		<keywords>image</keywords>
		<description>return all available</description>
		<return>
			<type>array</type>
		</return>
	</function>
	<!-- ImageInfo -->
	<function>
		<name>ImageInfo</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageInfo</class>
		<member-name>info</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<description>Returns a structure that contains information about the image, such as height, width, color model, size, and filename.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<return>
			<type>struct</type>
		</return>
	</function>
	<!-- ImageNegative -->
	<function>
		<name>ImageNegative</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageNegative</class>
		<member-name>negative</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Inverts the pixel values of a image.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageNew -->
	<function>
		<name>ImageNew</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageNew</class>
		<keywords>image</keywords>
		<description>Creates a image.</description>
		<argument>
			<name>source</name>
			<type>any</type>
			<required>no</required>
		<description>The source image path, URL, a variable that is read into the new image, or a Java buffered image.</description>
    </argument>
		<argument>
			<name>width</name>
			<type>string</type>
			<required>no</required>
		<description>The width of the new image. Valid when the height is specified and the source is not.</description>
    </argument>
		<argument>
			<name>height</name>
			<type>string</type>
			<required>no</required>
		<description>The height of the new image. Valid when the width is specified and the source is not.</description>
    </argument>
		<argument>
			<name>imageType</name>
			<alias>type</alias>
			<type>string</type>
			<required>no</required>
		<description>The type of the image to create (Valid only when width and height are specified):
- rgb
- argb
- grayscale</description>
    </argument>
		<argument>
			<name>canvasColor</name>
			<type>string</type>
			<required>no</required>
		<description>Color of the image canvas (The default value is "black"):
- Hexadecimal value of RGB color. For example, specify the color white as ##FFFFFF or FFFFFF.
- String value of color (for example, "black", "red", "green").
- List of three numbers for (R,G,B) values. Each value must be in the range 0-255.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	<!-- ImageOverlay -->
	<function>
		<name>ImageOverlay</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageOverlay</class>
		<member-name>overlay</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Reads two source images and overlays the second source image on the first source image.</description>
		<argument>
			<name>source1</name>
			<type>any</type>
			<required>Yes</required>
		<description>The image that is the bottom layer in the image.</description>
    </argument>
		<argument>
			<name>source2</name>
			<type>any</type>
			<required>Yes</required>
		<description>the image that is the top layer (overlaid on the source1 image) in the image.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImagePaste -->
	<function>
		<name>ImagePaste</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImagePaste</class>
		<member-name>paste</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Takes two images and an (x,y) coordinate and draws the second image over the first image with the upper-left corner at coordinate (x,y).</description>
		<argument>
			<name>image1</name>
			<type>any</type>
			<required>Yes</required>
		<description>The bottom image.</description>
    </argument>
		<argument>
			<name>image2</name>
			<type>any</type>
			<required>Yes</required>
		<description>The image that is pasted on top of image1.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>no</required>
		<description> The x coordinate where the upper-left corner of image2 is pasted.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>no</required>
		<description> The y coordinate where the upper-left corner of image2 is pasted.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageReadBase64 -->
	<function>
		<name>ImageReadBase64</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageReadBase64</class>
		<keywords>image</keywords>
		<description>Creates a image from a Base64 string.</description>
		<argument>
			<name>b64str</name>
			<alias>data</alias>
			<type>string</type>
			<required>Yes</required>
		<description>a variable or Base64 string.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	<!-- ImageRead -->
	<function>
		<name>ImageRead</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageRead</class>
		<keywords>image</keywords>
		<description>Reads the source pathname or URL and creates a image.</description>
		<argument>
			<name>path</name>
			<type>any</type>
			<required>Yes</required>
		<description>On-disk or in-memory pathname or URL of the source image.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	<!-- ImageResize -->
	<function>
		<name>ImageResize</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageResize</class>
		<member-name>resize</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Resizes a image.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>width</name>
			<type>string</type>
			<required>Yes</required>
		<description>New width of the image. If this value is blank, the width is calculated proportionately to the height.</description>
    </argument>
		<argument>
			<name>height</name>
			<type>string</type>
			<required>no</required>
		<description>New height of the image. If this value is blank, the height is calculated proportionately to the width.</description>
    </argument>
		<argument>
			<name>interpolation</name>
			<type>string</type>
			<required>no</required>
			<default>automatic</default>
		<description>the interpolation method for resampling. You can specify a specific interpolation algorithm by name (for example, hamming), by image quality (for example, mediumQuality), or by performance (for example, highestPerformance). Valid values are:
- automatic (default)
- highestQuality
- highQuality
- mediumQuality
- highestPerformance
- highPerformance
- mediumPerformance
- nearest
- bilinear
- bicubic
- bessel
- blackman
- hamming
- hanning
- hermite
- lanczos
- mitchell
- quadratic
</description>
    </argument>
		<argument>
			<name>blurFactor</name>
			<type>number</type>
			<required>no</required>
			<default>1</default>
		<description>The blur factor used for resampling. The higher the blur factor, the more blurred the image (also, the longer it takes to resize the image). Valid values are 1-10.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageRotate -->
	<function>
		<name>ImageRotate</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageRotate</class>
		<member-name>rotate</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Rotates a image at a specified point by a specified angle.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>string</type>
			<required>yes</required>
			<default>2</default>
			<description>The x coordinate for the point of rotation. The default value is 2.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>string</type>
			<required>no</required>
			<default>2</default>
			<description>The y coordinate for the point of rotation. The default value is 2.</description>
    </argument>
		<argument>
			<name>angle</name>
			<type>string</type>
			<required>no</required>
			<default>0</default>
			<description>The rotation angle in degrees.</description>
    </argument>
		<argument>
			<name>interpolation</name>
			<type>string</type>
			<required>no</required>
			<default>nearest</default>
		<description>Type of interpolation:
- nearest (default): Applies the nearest neighbor method of interpolation. Image quality is lower than the other interpolation methods, but processing is fastest.
- bilinear: Applies the bilinear method of interpolation. The quality of the image is less pixelated than the default, but processing is slower.
- bicubic: Applies the bicubic method of interpolation. Generally, the quality of image is highest with this method and processing is slowest.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageRotateDrawingAxis -->
	<function>
		<name>ImageRotateDrawingAxis</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageRotateDrawingAxis</class>
		<member-name>rotateDrawingAxis</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Rotates all subsequent drawing on a image at a specified point by a specified angle.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>angle</name>
			<type>number</type>
			<required>no</required>
		<description>The rotation angle in degrees.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>no</required>
		<description>The x coordinate for the point of rotation. The default value is 0.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>no</required>
		<description>The y coordinate for the point of rotation. The default value is 0.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageScaleToFit -->
	<function>
		<name>ImageScaleToFit</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageScaleToFit</class>
		<member-name>scaleToFit</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Creates a resized image with the aspect ratio maintained.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>fitWidth</name>
			<type>string</type>
			<required>yes</required>
		<description>The width of the bounding box in pixels. You can specify an integer, or an empty string ("") if the fitHeight is specified.</description>
    </argument>
		<argument>
			<name>fitHeight</name>
			<type>string</type>
			<required>yes</required>
		<description>The height of the bounding box in pixels. You can specify an integer, or an empty string ("") if the fitWidth is specified. </description>
    </argument>
		<argument>
			<name>interpolation</name>
			<type>string</type>
			<required>no</required>
			<default>automatic</default>
		<description>The interpolation method for resampling. You can specify a specific interpolation algorithm by name (for example, hamming), by image quality (for example, mediumQuality), or by performance (for example, highestPerformance). Valid values are:
- automatic (default)
- highestQuality
- highQuality
- mediumQuality
- highestPerformance
- highPerformance
- mediumPerformance
- nearest
- bilinear
- bicubic
- bessel
- blackman
- hamming
- hanning
- hermite
- lanczos
- mitchell
- quadratic</description>
    </argument>
		<argument>
			<name>blurFactor</name>
			<type>number</type>
			<required>no</required>
			<default>1</default>
		<description>The blur factor used for resampling. The higher the blur factor, the more blurred the image (also, the longer it takes to resize the image). Valid values are 1-10.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageWrite -->
	<function>
		<name>ImageWrite</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageWrite</class>
		<member-name>write</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Writes a image to the specified filename or destination.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
			<description>The image on which this operation is performed.</description>
    	</argument>
		<argument>
			<name>destination</name>
			<type>string</type>
			<required>no</required>
			<description>The path to write the file.

If you create the image with the ImageNew function or another operation where you do not specify the filename, specify the destination parameter.
The file format is derived from the extension of the filename. The default value for this parameter is the filename of the original image source.</description>
    	</argument>
		<argument>
			<name>quality</name>
			<type>number</type>
			<required>no</required>
			<default>0.75</default>
			<description>Defines the JPEG quality used to encode the image. This parameter applies only to destination files with an extension of JPG or JPEG. Valid values are fractions that range from 0 through 1 (the lower the number, the lower the quality). The default value is 0.75.</description>
   		</argument>
		<argument>
			<name>overwrite</name>
			<type>boolean</type>
			<required>no</required>
			<default>true</default>
			<description>If set to true (default), overwrites the destination file.</description>
    	</argument>
		<argument>
			<name>noMetaData</name>
			<type>boolean</type>
			<required>no</required>
			<default>false</default>
			<description>if true the meta data from the source file are ignored.</description>
    	</argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageWriteBase64 -->
	<function>
		<name>ImageWriteBase64</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageWriteBase64</class>
		<member-name>writeBase64</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<description>Writes Base64 images to the specified filename and destination.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
			<description>The image on which this operation is performed.</description>
	    </argument>
		<argument>
			<name>destination</name>
			<type>string</type>
			<required>yes</required>
		<description>The path for the destination file.</description>
    </argument>
		<argument>
			<name>format</name>
			<type>string</type>
			<required>yes</required>
		<description>the image format</description>
    </argument>
		<argument>
			<name>inHTMLFormat</name>
			<type>boolean</type>
			<required>no</required>
		<description>Specify whether Base64 output includes the headers used by the Base64 images in the HTML "img" tag ("data:image/{format};base64,...") :
- true
- false (default)</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>


	<!-- ImageWriteToBrowser -->
	<function>
		<name>ImageWriteToBrowser</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageWriteToBrowser</class>
		<member-name>writeToBrowser</member-name>
		<member-type>image</member-type>
		<keywords>image</keywords>
		<description>Writes image to browser.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
			<description>The image on which this operation is performed.</description>
	    </argument>
		<return>
			<type>void</type>
		</return>
	</function>

	<!-- ImageSetAntialiasing -->
	<function>
		<name>ImageSetAntialiasing</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageSetAntialiasing</class>
		<member-name>setAntialiasing</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Switches antialiasing on or off in rendered graphics.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>antialias</name>
			<type>string</type>
			<required>no</required>
			<default>on</default>
		<description>Antialiasing switch:
- on,true: (default)
- off,false:</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageSetBackgroundColor -->
	<function>
		<name>ImageSetBackgroundColor</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageSetBackgroundColor</class>
		<member-name>setBackgroundColor</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Sets the background color for the image. The background color is used for clearing a region. Setting the background color only affects the subsequent ImageClearRect calls</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>color</name>
			<alias>colour</alias>
			<type>string</type>
			<required>yes</required>
		<description>Background color (The default value is "black"):
- Hexadecimal value of RGB color. For example, specify the color white as ##FFFFFF or FFFFFF.
- String value of color (for example, "black", "red", "green"). 
- List of three numbers for (R,G,B) values. Each value must be in the range 0-255.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageSetDrawingAlpha -->
	<function>
		<name>ImageSetDrawingAlpha</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageSetDrawingAlpha</class>
		<member-name>setDrawingAlpha</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Sets the current drawing alpha for images. All subsequent graphics operations use the specified alpha.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>alpha</name>
			<type>number</type>
			<required>yes</required>
		<description>a floating point number in range 0-1</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageSetDrawingColor -->
	<function>
		<name>ImageSetDrawingColor</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageSetDrawingColor</class>
		<member-name>setDrawingColor</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Sets the current drawing color for images. All subsequent graphics operations use the specified color.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>color</name>
			<alias>colour</alias>
			<type>string</type>
			<required>yes</required>
		<description>Drawing color (The default value is "black"):
- Hexadecimal value of RGB color. For example, specify the color white as ##FFFFFF or FFFFFF.
- String value of color (for example, "black", "red", "green"). 
- List of three numbers for (R,G,B) values. Each value must be in the range 0-255.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageSetDrawingStroke -->
	<function>
		<name>ImageSetDrawingStroke</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageSetDrawingStroke</class>
		<member-name>setDrawingStroke</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Sets the drawing stroke for points and lines in subsequent images.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>attributeCollection</name>
			<type>struct</type>
			<required>no</required>
		<description>The structure used to specify the line attributes:
- width: Pen width, which is measured perpendicularly to the pen trajectory.
- endcaps: Decoration applied to the ends of unclosed subpaths and dash segments. Subpaths that start and end on the same point are considered unclosed if they do not have a close segment, valid values are ( butt.round,square )
- lineJoins: Type of line joins, valid values are (bevel,miter,join)
- miterLimit:The limit to trim a line join that has a mitered join decoration. (Use only when lineJoins = "miter".) A line join is trimmed when the ratio of miter length to stroke width is greater than the miterLimit value. The miter length is the diagonal length of the miter, which is the distance between the inside corner and the outside corner of the intersection. The smaller the angle formed by two line segments, the longer the miter length and the sharper the angle of intersection. The default value is 10.0, which trims all angles less than 11 degrees. Trimming miters converts the decoration of the line join to bevel.
- dashArray: An array of numbers that indicates the dash pattern. For example. if dashArray is (8,4), the dash pattern is 8 pixels solid, 4 pixels blank, 8 pixels solid, 4 pixels blank, and so on.
- dash_phases: An offset into the dash pattern. For example, a dash_phase of 2, and a dashArray of (8,4) produces the dash pattern of 6 pixels solid, 4 pixels blank, 8 pixels solid, 4 pixels blank, and so on.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageSetDrawingTransparency -->
	<function>
		<name>ImageSetDrawingTransparency</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageSetDrawingTransparency</class>
		<member-name>setDrawingTransparency</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Specifies the degree of transparency of drawing functions.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>percent</name>
			<type>number</type>
			<required>no</required>
			<default>1</default>
		<description>Percent of transparency, a floating point number in range 0-100</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageSharpen -->
	<function>
		<name>ImageSharpen</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageSharpen</class>
		<member-name>sharpen</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Sharpens a image by using the unsharp mask filter.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>gain</name>
			<type>number</type>
			<required>no</required>
			<default>1</default>
		<description>Gain values can be integers or real numbers. The default value is 1.0.
The value determines whether the image is blurred or sharpened:
- if &gt; 0, the image is sharpened
- if = 0, no effect
- if &lt; 0, the image is blurred</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageShear -->
	<function>
		<name>ImageShear</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageShear</class>
		<member-name>shear</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Shears an image either horizontally or vertically.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>shear</name>
			<type>number</type>
			<required>Yes</required>
		<description>Shear value. Coordinates can be integers or real numbers.</description>
    </argument>
		<argument>
			<name>direction</name>
			<type>string</type>
			<required>no</required>
			<default>horizontal</default>
		<description>Shear direction:
- horizontal (default)
- vertical</description>
    </argument>
		<argument>
			<name>interpolation</name>
			<type>string</type>
			<required>no</required>
			<default>nearest</default>
		<description>Type of interpolation:
- nearest (default): Applies the nearest neighbor method of interpolation. Image quality is lower than the other interpolation methods, but processing is fastest.
- bilinear: Applies the bilinear method of interpolation. The quality of the image is less pixelated than the default, but processing is slower.
- bicubic: Applies the bicubic method of interpolation. Generally, the quality of image is highest with this method and processing is slowest.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageShearDrawingAxis -->
	<function>
		<name>ImageShearDrawingAxis</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageShearDrawingAxis</class>
		<member-name>shearDrawingAxis</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Shears the drawing canvas.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>shx</name>
			<type>number</type>
			<required>Yes</required>
		<description>The multiplier by which coordinates are shifted in the positive x axis direction as a function of the y coordinate.</description>
    </argument>
		<argument>
			<name>shy</name>
			<type>number</type>
			<required>Yes</required>
		<description>the multiplier by which coordinates are shifted in the positive y axis direction as a function of the x coordinate.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageTranslate -->
	<function>
		<name>ImageTranslate</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageTranslate</class>
		<member-name>translate</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Copies an image to a new location on the plane.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>xTrans</name>
			<type>number</type>
			<required>Yes</required>
		<description>Displacement in the x direction.</description>
    </argument>
		<argument>
			<name>yTrans</name>
			<type>number</type>
			<required>Yes</required>
		<description>Displacement in the y direction.</description>
    </argument>
		<argument>
			<name>interpolation</name>
			<type>string</type>
			<required>no</required>
			<default>nearest</default>
		<description>Type of interpolation:
- nearest (default): Applies the nearest neighbor method of interpolation. Image quality is lower than the other interpolation methods, but processing is fastest.
- bilinear: Applies the bilinear method of interpolation. The quality of the image is less pixelated than the default, but processing is slower.
- bicubic: Applies the bicubic method of interpolation. Generally, the quality of image is highest with this method and processing is slowest.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageTranslateDrawingAxis -->
	<function>
		<name>ImageTranslateDrawingAxis</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageTranslateDrawingAxis</class>
		<member-name>translateDrawingAxis</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Translates the origin of the image context to the point (x,y) in the current coordinate system. 
		Modifies the image context so that its new origin corresponds to the point (x,y) in the image's original coordinate system.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>Yes</required>
		<description>x coordinate</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>Yes</required>
		<description>y coordinate</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	<!-- ImageXORDrawingMode -->
	<function>
		<name>ImageXORDrawingMode</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageXORDrawingMode</class>
		<member-name>XORDrawingMode</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>Sets the paint mode of the image to alternate between the image's current color and the new specified color.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The image on which this operation is performed.</description>
    </argument>
		<argument>
			<name>color</name>
			<alias>colour</alias>
			<type>string</type>
			<required>Yes</required>
		<description>the color (The default value is "black"):
- Hexadecimal value of RGB color. For example, specify the color white as ##FFFFFF or FFFFFF.
- String value of color (for example, "black", "red", "green"). 
- List of three numbers for (R,G,B) values. Each value must be in the range 0-255.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	
	
	

	<!-- IsImage -->
	<function>
		<name>IsImage</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.IsImage</class>
		<keywords>image,decision</keywords>
		<description>Determines whether a variable returns a image.</description>
		<argument>
			<name>image</name>
			<alias>value,object,name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>The variable that is checked.</description>
    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>
	<!-- IsImageFile -->
	<function>
		<name>IsImageFile</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.IsImageFile</class>
		<keywords>decision,image</keywords>
		<description>Verifies whether an image file is valid.</description>
		<argument>
			<name>path</name>
			<alias>value,file</alias>
			<type>string</type>
			<required>Yes</required>
		<description>The pathname of the file to be checked. The pathname can be absolute or relative to the CFM page and must be enclosed in quotation marks.</description>
    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>


	<!-- ImageDrawImage -->
	<function>
		<name>ImageDrawImage</name>
		<class bundle-name="{bundle-name}" bundle-version="{bundle-version}">org.lucee.extension.image.functions.ImageDrawImage</class>
		<status>deprecated</status>
		<member-name>drawImage</member-name>
		<member-type>image</member-type>
		<member-chaining>true</member-chaining>
		<keywords>image</keywords>
		<description>this function is deprecated, use ImagePaste instead. Draws a image on a image with the baseline of the first character positioned at (x,y) in the image.</description>
		<argument>
			<name>image</name>
			<alias>name</alias>
			<type>any</type>
			<required>Yes</required>
		<description>the image to draw on it</description>
    </argument>
		<argument>
			<name>image</name>
			<type>any</type>
			<required>Yes</required>
		<description>the image to draw</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the of the top left corner of the image to draw.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the of the top left corner of the image to draw.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	
	
</func-lib>
